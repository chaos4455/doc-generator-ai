import os
import sys
# Removido: import requests (n√£o √© mais necess√°rio para a comunica√ß√£o com a API Gemini)
import hashlib
import re
from concurrent.futures import ThreadPoolExecutor, as_completed

# Importa a biblioteca oficial do Google Generative AI
import google.generativeai as genai
import google.api_core.exceptions # Para tratamento de erros da API

# Chave da API para acesso √† gera√ß√£o de conte√∫do
API_KEY = os.getenv('GOOGLEAPIKEY')

# --- Configura√ß√£o da API do Google Gemini ---
if not API_KEY:
    print("Erro: A vari√°vel de ambiente GOOGLEAPIKEY n√£o est√° definida.")
    print("Por favor, defina-a antes de executar o script.")
    sys.exit(1) # Sai do script se a chave n√£o estiver configurada

genai.configure(api_key=API_KEY)

# Fun√ß√£o para gerar um nome √∫nico baseado em uma hash SHA-256 do texto
def generate_unique_name(prompt_text):
    # Remove caracteres especiais e espa√ßos
    # Limitando o texto para hash para evitar nomes de arquivo muito longos e garantir consist√™ncia
    clean_text = re.sub(r'[^\w\s]', '', prompt_text)[:100] # Limita a 100 caracteres antes de limpar
    hash_object = hashlib.sha256(clean_text.encode('utf-8'))
    hash_digest = hash_object.hexdigest()
    # Cria um nome de arquivo seguro, substituindo espa√ßos e limitando a parte do texto
    unique_name = f"{re.sub(r'\s+', '_', clean_text)[:50]}_{hash_digest[:8]}"
    return unique_name.strip('_') # Remove underscore extra se o texto for curto

# Fun√ß√£o para enviar requisi√ß√£o √† API de gera√ß√£o de conte√∫do (agora usando google-generativeai)
def generate_content(prompt_text):
    try:
        # Define o modelo que ser√° utilizado
        # Usando 'gemini-1.5-flash' conforme voc√™ j√° havia ajustado no seu c√≥digo requests
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Envia a requisi√ß√£o de gera√ß√£o de conte√∫do
        response = model.generate_content(prompt_text)
        
        # Acessa o texto da resposta. A biblioteca lida com a estrutura complexa do JSON.
        # Verifica se h√° texto na resposta antes de retornar
        if response.parts and response.parts[0].text:
            return response.parts[0].text
        else:
            # Caso a resposta seja vazia ou incompleta (ex: devido a quest√µes de seguran√ßa ou tokens)
            print(f"Aviso: A API retornou uma resposta vazia ou incompleta para o prompt.")
            print(f"Prompt: {prompt_text[:100]}...") # Mostra os primeiros 100 caracteres do prompt
            if hasattr(response, 'prompt_feedback') and response.prompt_feedback:
                print(f"Feedback do Prompt: {response.prompt_feedback}")
            return None

    except google.api_core.exceptions.GoogleAPIError as e:
        print(f"Erro da API do Google: {e}")
        # Detalhes adicionais podem ser √∫teis para depura√ß√£o
        if hasattr(e, 'response'):
            print(f"Detalhes da Resposta de Erro: {e.response.text}")
        return None
    except Exception as e:
        print(f"Ocorreu um erro inesperado ao gerar conte√∫do: {e}")
        return None

# Fun√ß√£o para gerar uma lista de subtemas baseada no tema principal
def generate_subthemes(theme):
    prompt_text = f"Gere uma lista de 2 subtemas detalhados, √∫nicos e distintos sobre o tema principal: '{theme}'. N√£o inclua introdu√ß√£o ou conclus√£o, apenas a lista. Use um formato simples de lista."
    subthemes_text = generate_content(prompt_text)
    if subthemes_text:
        # Tenta parsear a resposta, assumindo que cada linha √© um subtema
        # Remove marcadores de lista como "1. ", "- " etc.
        subthemes = [re.sub(r'^\s*[\d\.\-\*]+\s*', '', line).strip() for line in subthemes_text.split('\n') if line.strip()]
        return subthemes
    else:
        print("Falha ao gerar a lista de subtemas.")
        return []

# Fun√ß√£o para gerar a lista de t√≠tulos dos manuais para um subtema
def generate_manual_titles(subtheme):
    prompt_text = f"Crie uma lista com 2 a 3 t√≠tulos de manuais *detalhados e completos* que podem ser criados sobre o subtema '{subtheme}'. Os t√≠tulos devem ser pr√°ticos e espec√≠ficos. N√£o inclua introdu√ß√£o ou conclus√£o, apenas a lista. Use um formato simples de lista."
    titles_text = generate_content(prompt_text)
    if titles_text:
        # Tenta parsear a resposta, removendo marcadores de lista
        titles = [re.sub(r'^\s*[\d\.\-\*]+\s*', '', line).strip() for line in titles_text.split('\n') if line.strip()]
        return titles
    else:
        print(f"Falha ao gerar a lista de t√≠tulos dos manuais para o subtema '{subtheme}'.")
        return []

# Fun√ß√£o para processar os manuais em paralelo usando ThreadPoolExecutor
def process_manuals(subtheme, manual_titles):
    print(f"\n--- Gerando manuais para o subtema: '{subtheme}' ---")
    with ThreadPoolExecutor(max_workers=4) as executor:
        future_to_title = {executor.submit(generate_manual_content, subtheme, title): title for title in manual_titles}
        for future in as_completed(future_to_title):
            title = future_to_title[future]
            try:
                generated_content = future.result()
                if generated_content:
                    # Garante que o nome do arquivo seja seguro e √∫nico
                    unique_name = generate_unique_name(f"{title}") 
                    file_path = f"{unique_name}.md"
                    with open(file_path, "w", encoding="utf-8") as md_file:
                        md_file.write(generated_content)
                    print(f"‚úÖ Manual gerado com sucesso: '{file_path}' (T√≠tulo: '{title}')")
                else:
                    print(f"‚ùå Falha ao gerar o conte√∫do do Manual para o t√≠tulo: '{title}' no subtema '{subtheme}' (conte√∫do vazio ou erro pr√©vio)")
            except Exception as exc:
                print(f"‚ùå Erro cr√≠tico ao processar o Manual para o t√≠tulo: '{title}' no subtema '{subtheme}': {exc}")

# Fun√ß√£o para gerar o conte√∫do de um manual espec√≠fico
def generate_manual_content(subtheme, title):
    prompt = (
        f"Crie um manual completo e detalhado sobre o t√≥pico '{title}', considerando o subtema maior de '{subtheme}'. "
        "O manual deve ser altamente rico, estilizado e did√°tico. "
        "Use muitos t√≥picos, se√ß√µes, exemplos pr√°ticos, snippets de c√≥digo (especialmente para bash/shell e Red Hat/Solaris), tabelas (se aplic√°vel), diagramas de √°rvore para ilustrar hierarquias ou fluxos de processo. "
        "Gere respostas longas e exaustivas. Para cada exemplo, forne√ßa no m√≠nimo 5-10 exemplos pr√°ticos. "
        "**Obrigat√≥rio**: Use in√∫meros √≠cones e emojis (unicode) ao longo do texto para representar conceitos, tecnologias, a√ß√µes, ferramentas, pr√°ticas e para estilizar o manual. "
        "O manual deve ser pr√°tico, operacional, ensinar o que fazer, como fazer e de que jeito fazer, em detalhes, do come√ßo ao fim, sendo auto explicativo. N√£o deve ser apenas um √≠ndice ou uma lista de t√≥picos, mas sim um guia de processos passo a passo. "
        "O conte√∫do deve ser estilizado para o Notion (mas com markdown padr√£o), ser extremamente detalhado, completo, e n√£o superficial. Deve ser explicativo e pr√°tico, utilizando uma did√°tica t√©cnica acess√≠vel."
        "\n\nüö® Dica: Pense como um engenheiro que precisa documentar cada detalhe para que algu√©m sem experi√™ncia possa replicar."
    )
    print(f"Gerando conte√∫do para: '{title}' (Subtema: '{subtheme}')")
    return generate_content(prompt)

# Fun√ß√£o principal para gerar manuais
def create_manuals(theme):
    print(f"Iniciando a gera√ß√£o de manuais para o tema principal: '{theme}'")
    # Gera a lista de subtemas
    subthemes = generate_subthemes(theme)

    if subthemes:
        print(f"Subtemas gerados: {subthemes}")
        for subtheme in subthemes:
            # Gera a lista de t√≠tulos dos manuais para o subtema atual
            manual_titles = generate_manual_titles(subtheme)

            if manual_titles:
                print(f"T√≠tulos de manuais para '{subtheme}': {manual_titles}")
                process_manuals(subtheme, manual_titles)
            else:
                print(f"‚ùó Nenhum t√≠tulo de manual gerado para o subtema '{subtheme}'. Pulando este subtema.")
    else:
        print("‚ùó Nenhuma lista de subtemas foi gerada. Encerrando o processo.")

# Obt√©m o tema da vari√°vel de ambiente TEMA
# Use um tema padr√£o ou saia se TEMA n√£o for fornecido e voc√™ quiser que seja obrigat√≥rio
if __name__ == "__main__":
    tema = os.getenv("TEMA")
    if not tema:
        print("Erro: A vari√°vel de ambiente 'TEMA' n√£o foi definida.")
        print("Uso: export TEMA=\"seu tema\" && python doc-gen.py")
        sys.exit(1)

    create_manuals(tema)
    print("\nProcesso de gera√ß√£o de manuais conclu√≠do.")
