name: Generate and Commit Manuals (Hourly)

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  generate-manuals:
    runs-on: ubuntu-latest
    concurrency: generate-manuals-workflow

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure local repository is up-to-date with main
        run: |
          echo "Updating local repository to the latest 'main' branch..."
          git fetch origin main
          git reset --hard origin/main
          echo "Local repository is now up-to-date."

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install requests
          python -m pip install google-generativeai

      - name: Verify doc-gen.py and make executable
        run: |
          if [ ! -f "doc-gen.py" ]; then
            echo "Error: doc-gen.py not found."
            exit 1
          fi
          chmod +x doc-gen.py

      # --- NOVO PASSO DE VERIFICAÇÃO ---
      - name: Display doc-gen.py model configuration
        run: |
          echo "Conteúdo de doc-gen.py:"
          # Exibe o arquivo inteiro (pode ser grande)
          # cat doc-gen.py
          # OU, exibe apenas a linha relevante para o modelo:
          grep "genai.GenerativeModel" doc-gen.py || echo "Linha 'genai.GenerativeModel' não encontrada em doc-gen.py"
          # OU, exibe a parte do código que faz a requisição se você ainda estiver usando requests (improvável agora)
          # grep -C 5 "generativelanguage.googleapis.com" doc-gen.py || echo "URL da API não encontrada via requests"
      # --- FIM DO NOVO PASSO ---

      - name: Run doc-gen.py to generate manuals
        env:
          GOOGLEAPIKEY: ${{ secrets.GOOGLEAPIKEY }}
          TEMA: "gerenciamento de patch de seguranças com red hat e solaris usando bash e shell - crie os manuais completos e longos detalhados em exemplos práticos, use icones e emojis"
        run: |
          echo "Running doc-gen.py with theme: $TEMA"
          python doc-gen.py "$TEMA"
          echo "Manuals generation complete."

      - name: Verify generated artifacts
        run: |
          echo "Listing generated files:"
          ls -R

      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Commit changes
        run: |
          git add .
          if git diff --quiet --cached; then
            echo "No changes to commit."
          else
            echo "Committing generated manuals..."
            git commit -m "Generated manuals for tema: '$TEMA'"
          fi

      - name: Push changes back to repository
        run: |
          if [ "$(git rev-parse HEAD)" != "$(git rev-parse @{u})" ]; then
            echo "Pushing changes to origin/main..."
            git push origin main
          else
            echo "No new commits to push."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
